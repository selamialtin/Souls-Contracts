/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ProxyInterface extends utils.Interface {
  functions: {
    "addToTrustedSources(address,string)": FunctionFragment;
    "advisorShare()": FunctionFragment;
    "advisorVaultAddress()": FunctionFragment;
    "airdropShare()": FunctionFragment;
    "airdropVaultAddress()": FunctionFragment;
    "approveTokensForCrowdFundingContract(address)": FunctionFragment;
    "approveTokensToCrowdFundingContract(address)": FunctionFragment;
    "approveTopicTestVariable()": FunctionFragment;
    "dexPairAddress()": FunctionFragment;
    "exchangesShare()": FunctionFragment;
    "exchangesVaultAddress()": FunctionFragment;
    "initAirdropContract(address)": FunctionFragment;
    "initLiquidityVault(address,address)": FunctionFragment;
    "initPlayToEarnVault(address,uint256)": FunctionFragment;
    "initStakingContract(address)": FunctionFragment;
    "initVault(address,uint8)": FunctionFragment;
    "liquidityShare()": FunctionFragment;
    "liquidityTokensUnlockTime()": FunctionFragment;
    "liquidityVaultAddress()": FunctionFragment;
    "managers()": FunctionFragment;
    "marketingShare()": FunctionFragment;
    "marketingVaultAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "playToEarnShare()": FunctionFragment;
    "playToEarnVaultAddress()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "soulsToken()": FunctionFragment;
    "stakingAddress()": FunctionFragment;
    "stakingShare()": FunctionFragment;
    "teamShare()": FunctionFragment;
    "teamVaultAddress()": FunctionFragment;
    "testApproveTopicFunction(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferSoulsToAddress(address,uint256)": FunctionFragment;
    "transferTokensToCrowdFundingContract(address,uint256)": FunctionFragment;
    "treasuryShare()": FunctionFragment;
    "treasuryVaultAddress()": FunctionFragment;
    "withdrawLPTokens(address)": FunctionFragment;
    "withdrawTokens(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addToTrustedSources"
      | "advisorShare"
      | "advisorVaultAddress"
      | "airdropShare"
      | "airdropVaultAddress"
      | "approveTokensForCrowdFundingContract"
      | "approveTokensToCrowdFundingContract"
      | "approveTopicTestVariable"
      | "dexPairAddress"
      | "exchangesShare"
      | "exchangesVaultAddress"
      | "initAirdropContract"
      | "initLiquidityVault"
      | "initPlayToEarnVault"
      | "initStakingContract"
      | "initVault"
      | "liquidityShare"
      | "liquidityTokensUnlockTime"
      | "liquidityVaultAddress"
      | "managers"
      | "marketingShare"
      | "marketingVaultAddress"
      | "owner"
      | "playToEarnShare"
      | "playToEarnVaultAddress"
      | "renounceOwnership"
      | "soulsToken"
      | "stakingAddress"
      | "stakingShare"
      | "teamShare"
      | "teamVaultAddress"
      | "testApproveTopicFunction"
      | "transferOwnership"
      | "transferSoulsToAddress"
      | "transferTokensToCrowdFundingContract"
      | "treasuryShare"
      | "treasuryVaultAddress"
      | "withdrawLPTokens"
      | "withdrawTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addToTrustedSources",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "advisorShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "advisorVaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdropShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdropVaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveTokensForCrowdFundingContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveTokensToCrowdFundingContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveTopicTestVariable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dexPairAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangesShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangesVaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initAirdropContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initLiquidityVault",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initPlayToEarnVault",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initStakingContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initVault",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityTokensUnlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityVaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "managers", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "marketingShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingVaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playToEarnShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "playToEarnVaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "soulsToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingShare",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "teamShare", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "teamVaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testApproveTopicFunction",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferSoulsToAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokensToCrowdFundingContract",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryVaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLPTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToTrustedSources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advisorShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advisorVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveTokensForCrowdFundingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveTokensToCrowdFundingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveTopicTestVariable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dexPairAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangesShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangesVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initAirdropContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initLiquidityVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initPlayToEarnVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initStakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityTokensUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "managers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketingShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playToEarnShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playToEarnVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "soulsToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teamShare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "teamVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testApproveTopicFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferSoulsToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokensToCrowdFundingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLPTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Proxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToTrustedSources(
      _address: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    advisorShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    advisorVaultAddress(overrides?: CallOverrides): Promise<[string]>;

    airdropShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    airdropVaultAddress(overrides?: CallOverrides): Promise<[string]>;

    approveTokensForCrowdFundingContract(
      _crowdfundingContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveTokensToCrowdFundingContract(
      _crowdFundingContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveTopicTestVariable(overrides?: CallOverrides): Promise<[boolean]>;

    dexPairAddress(overrides?: CallOverrides): Promise<[string]>;

    exchangesShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangesVaultAddress(overrides?: CallOverrides): Promise<[string]>;

    initAirdropContract(
      _airdropContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initLiquidityVault(
      _liquidityVaultAddress: PromiseOrValue<string>,
      _BUSDTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initPlayToEarnVault(
      _playToEarnVaultAddress: PromiseOrValue<string>,
      _gameStartTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initStakingContract(
      _stakingAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initVault(
      _vaultAddress: PromiseOrValue<string>,
      _vaultToInit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidityShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityTokensUnlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityVaultAddress(overrides?: CallOverrides): Promise<[string]>;

    managers(overrides?: CallOverrides): Promise<[string]>;

    marketingShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    marketingVaultAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    playToEarnShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    playToEarnVaultAddress(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    soulsToken(overrides?: CallOverrides): Promise<[string]>;

    stakingAddress(overrides?: CallOverrides): Promise<[string]>;

    stakingShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    teamShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    teamVaultAddress(overrides?: CallOverrides): Promise<[string]>;

    testApproveTopicFunction(
      _testAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferSoulsToAddress(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferTokensToCrowdFundingContract(
      _contractAddress: PromiseOrValue<string>,
      _totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasuryShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasuryVaultAddress(overrides?: CallOverrides): Promise<[string]>;

    withdrawLPTokens(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawTokens(
      _tokenAddress: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addToTrustedSources(
    _address: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  advisorShare(overrides?: CallOverrides): Promise<BigNumber>;

  advisorVaultAddress(overrides?: CallOverrides): Promise<string>;

  airdropShare(overrides?: CallOverrides): Promise<BigNumber>;

  airdropVaultAddress(overrides?: CallOverrides): Promise<string>;

  approveTokensForCrowdFundingContract(
    _crowdfundingContractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveTokensToCrowdFundingContract(
    _crowdFundingContractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveTopicTestVariable(overrides?: CallOverrides): Promise<boolean>;

  dexPairAddress(overrides?: CallOverrides): Promise<string>;

  exchangesShare(overrides?: CallOverrides): Promise<BigNumber>;

  exchangesVaultAddress(overrides?: CallOverrides): Promise<string>;

  initAirdropContract(
    _airdropContractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initLiquidityVault(
    _liquidityVaultAddress: PromiseOrValue<string>,
    _BUSDTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initPlayToEarnVault(
    _playToEarnVaultAddress: PromiseOrValue<string>,
    _gameStartTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initStakingContract(
    _stakingAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initVault(
    _vaultAddress: PromiseOrValue<string>,
    _vaultToInit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidityShare(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityTokensUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityVaultAddress(overrides?: CallOverrides): Promise<string>;

  managers(overrides?: CallOverrides): Promise<string>;

  marketingShare(overrides?: CallOverrides): Promise<BigNumber>;

  marketingVaultAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  playToEarnShare(overrides?: CallOverrides): Promise<BigNumber>;

  playToEarnVaultAddress(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  soulsToken(overrides?: CallOverrides): Promise<string>;

  stakingAddress(overrides?: CallOverrides): Promise<string>;

  stakingShare(overrides?: CallOverrides): Promise<BigNumber>;

  teamShare(overrides?: CallOverrides): Promise<BigNumber>;

  teamVaultAddress(overrides?: CallOverrides): Promise<string>;

  testApproveTopicFunction(
    _testAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferSoulsToAddress(
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferTokensToCrowdFundingContract(
    _contractAddress: PromiseOrValue<string>,
    _totalAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasuryShare(overrides?: CallOverrides): Promise<BigNumber>;

  treasuryVaultAddress(overrides?: CallOverrides): Promise<string>;

  withdrawLPTokens(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawTokens(
    _tokenAddress: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addToTrustedSources(
      _address: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    advisorShare(overrides?: CallOverrides): Promise<BigNumber>;

    advisorVaultAddress(overrides?: CallOverrides): Promise<string>;

    airdropShare(overrides?: CallOverrides): Promise<BigNumber>;

    airdropVaultAddress(overrides?: CallOverrides): Promise<string>;

    approveTokensForCrowdFundingContract(
      _crowdfundingContractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveTokensToCrowdFundingContract(
      _crowdFundingContractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveTopicTestVariable(overrides?: CallOverrides): Promise<boolean>;

    dexPairAddress(overrides?: CallOverrides): Promise<string>;

    exchangesShare(overrides?: CallOverrides): Promise<BigNumber>;

    exchangesVaultAddress(overrides?: CallOverrides): Promise<string>;

    initAirdropContract(
      _airdropContractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initLiquidityVault(
      _liquidityVaultAddress: PromiseOrValue<string>,
      _BUSDTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initPlayToEarnVault(
      _playToEarnVaultAddress: PromiseOrValue<string>,
      _gameStartTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initStakingContract(
      _stakingAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initVault(
      _vaultAddress: PromiseOrValue<string>,
      _vaultToInit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidityShare(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityTokensUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityVaultAddress(overrides?: CallOverrides): Promise<string>;

    managers(overrides?: CallOverrides): Promise<string>;

    marketingShare(overrides?: CallOverrides): Promise<BigNumber>;

    marketingVaultAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    playToEarnShare(overrides?: CallOverrides): Promise<BigNumber>;

    playToEarnVaultAddress(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    soulsToken(overrides?: CallOverrides): Promise<string>;

    stakingAddress(overrides?: CallOverrides): Promise<string>;

    stakingShare(overrides?: CallOverrides): Promise<BigNumber>;

    teamShare(overrides?: CallOverrides): Promise<BigNumber>;

    teamVaultAddress(overrides?: CallOverrides): Promise<string>;

    testApproveTopicFunction(
      _testAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferSoulsToAddress(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTokensToCrowdFundingContract(
      _contractAddress: PromiseOrValue<string>,
      _totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryShare(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryVaultAddress(overrides?: CallOverrides): Promise<string>;

    withdrawLPTokens(
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokens(
      _tokenAddress: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addToTrustedSources(
      _address: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    advisorShare(overrides?: CallOverrides): Promise<BigNumber>;

    advisorVaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    airdropShare(overrides?: CallOverrides): Promise<BigNumber>;

    airdropVaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    approveTokensForCrowdFundingContract(
      _crowdfundingContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveTokensToCrowdFundingContract(
      _crowdFundingContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveTopicTestVariable(overrides?: CallOverrides): Promise<BigNumber>;

    dexPairAddress(overrides?: CallOverrides): Promise<BigNumber>;

    exchangesShare(overrides?: CallOverrides): Promise<BigNumber>;

    exchangesVaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    initAirdropContract(
      _airdropContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initLiquidityVault(
      _liquidityVaultAddress: PromiseOrValue<string>,
      _BUSDTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initPlayToEarnVault(
      _playToEarnVaultAddress: PromiseOrValue<string>,
      _gameStartTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initStakingContract(
      _stakingAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initVault(
      _vaultAddress: PromiseOrValue<string>,
      _vaultToInit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidityShare(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityTokensUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityVaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    managers(overrides?: CallOverrides): Promise<BigNumber>;

    marketingShare(overrides?: CallOverrides): Promise<BigNumber>;

    marketingVaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    playToEarnShare(overrides?: CallOverrides): Promise<BigNumber>;

    playToEarnVaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    soulsToken(overrides?: CallOverrides): Promise<BigNumber>;

    stakingAddress(overrides?: CallOverrides): Promise<BigNumber>;

    stakingShare(overrides?: CallOverrides): Promise<BigNumber>;

    teamShare(overrides?: CallOverrides): Promise<BigNumber>;

    teamVaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    testApproveTopicFunction(
      _testAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferSoulsToAddress(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferTokensToCrowdFundingContract(
      _contractAddress: PromiseOrValue<string>,
      _totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasuryShare(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryVaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawLPTokens(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawTokens(
      _tokenAddress: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToTrustedSources(
      _address: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    advisorShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    advisorVaultAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    airdropShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    airdropVaultAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveTokensForCrowdFundingContract(
      _crowdfundingContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveTokensToCrowdFundingContract(
      _crowdFundingContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveTopicTestVariable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dexPairAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangesShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangesVaultAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initAirdropContract(
      _airdropContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initLiquidityVault(
      _liquidityVaultAddress: PromiseOrValue<string>,
      _BUSDTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initPlayToEarnVault(
      _playToEarnVaultAddress: PromiseOrValue<string>,
      _gameStartTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initStakingContract(
      _stakingAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initVault(
      _vaultAddress: PromiseOrValue<string>,
      _vaultToInit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidityShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityTokensUnlockTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityVaultAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    managers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketingShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketingVaultAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playToEarnShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playToEarnVaultAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    soulsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamVaultAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testApproveTopicFunction(
      _testAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferSoulsToAddress(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferTokensToCrowdFundingContract(
      _contractAddress: PromiseOrValue<string>,
      _totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasuryShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryVaultAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawLPTokens(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      _tokenAddress: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
