/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Managers {
  export type TopicStruct = {
    source: PromiseOrValue<string>;
    title: PromiseOrValue<string>;
    approveCount: PromiseOrValue<BigNumberish>;
  };

  export type TopicStructOutput = [string, string, BigNumber] & {
    source: string;
    title: string;
    approveCount: BigNumber;
  };

  export type TopicApprovalStruct = {
    source: PromiseOrValue<string>;
    approved: PromiseOrValue<boolean>;
    value: PromiseOrValue<BytesLike>;
  };

  export type TopicApprovalStructOutput = [string, boolean, string] & {
    source: string;
    approved: boolean;
    value: string;
  };
}

export interface ManagersInterface extends utils.Interface {
  functions: {
    "activeTopics(uint256)": FunctionFragment;
    "addAddressToTrustedSources(address,string)": FunctionFragment;
    "approveTopic(string,bytes)": FunctionFragment;
    "cancelTopicApproval(string)": FunctionFragment;
    "changeManager1Address(address)": FunctionFragment;
    "changeManager2Address(address)": FunctionFragment;
    "changeManager3Address(address)": FunctionFragment;
    "changeManager4Address(address)": FunctionFragment;
    "changeManager5Address(address)": FunctionFragment;
    "deleteTopic(string)": FunctionFragment;
    "getActiveTopics()": FunctionFragment;
    "getManagerApprovalsForTitle(string)": FunctionFragment;
    "isApproved(string,bytes)": FunctionFragment;
    "isManager(address)": FunctionFragment;
    "manager1()": FunctionFragment;
    "manager2()": FunctionFragment;
    "manager3()": FunctionFragment;
    "manager4()": FunctionFragment;
    "manager5()": FunctionFragment;
    "managerApprovalsForTopic(string,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "trustedSources(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activeTopics"
      | "addAddressToTrustedSources"
      | "approveTopic"
      | "cancelTopicApproval"
      | "changeManager1Address"
      | "changeManager2Address"
      | "changeManager3Address"
      | "changeManager4Address"
      | "changeManager5Address"
      | "deleteTopic"
      | "getActiveTopics"
      | "getManagerApprovalsForTitle"
      | "isApproved"
      | "isManager"
      | "manager1"
      | "manager2"
      | "manager3"
      | "manager4"
      | "manager5"
      | "managerApprovalsForTopic"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "trustedSources"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activeTopics",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addAddressToTrustedSources",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveTopic",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTopicApproval",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeManager1Address",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeManager2Address",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeManager3Address",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeManager4Address",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeManager5Address",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteTopic",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveTopics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getManagerApprovalsForTitle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApproved",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "manager1", values?: undefined): string;
  encodeFunctionData(functionFragment: "manager2", values?: undefined): string;
  encodeFunctionData(functionFragment: "manager3", values?: undefined): string;
  encodeFunctionData(functionFragment: "manager4", values?: undefined): string;
  encodeFunctionData(functionFragment: "manager5", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "managerApprovalsForTopic",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedSources",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeTopics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAddressToTrustedSources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveTopic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTopicApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeManager1Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeManager2Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeManager3Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeManager4Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeManager5Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteTopic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveTopics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManagerApprovalsForTitle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isApproved", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager5", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "managerApprovalsForTopic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedSources",
    data: BytesLike
  ): Result;

  events: {
    "AddTrustedSource(address,string)": EventFragment;
    "ApproveTopic(address,string,bytes)": EventFragment;
    "CancelTopicApproval(address,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddTrustedSource"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApproveTopic"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelTopicApproval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface AddTrustedSourceEventObject {
  _address: string;
  _name: string;
}
export type AddTrustedSourceEvent = TypedEvent<
  [string, string],
  AddTrustedSourceEventObject
>;

export type AddTrustedSourceEventFilter =
  TypedEventFilter<AddTrustedSourceEvent>;

export interface ApproveTopicEventObject {
  _by: string;
  _title: string;
  _valueInBytes: string;
}
export type ApproveTopicEvent = TypedEvent<
  [string, string, string],
  ApproveTopicEventObject
>;

export type ApproveTopicEventFilter = TypedEventFilter<ApproveTopicEvent>;

export interface CancelTopicApprovalEventObject {
  _by: string;
  _title: string;
}
export type CancelTopicApprovalEvent = TypedEvent<
  [string, string],
  CancelTopicApprovalEventObject
>;

export type CancelTopicApprovalEventFilter =
  TypedEventFilter<CancelTopicApprovalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Managers extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ManagersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeTopics(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        source: string;
        title: string;
        approveCount: BigNumber;
      }
    >;

    addAddressToTrustedSources(
      _address: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveTopic(
      _title: PromiseOrValue<string>,
      _valueInBytes: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelTopicApproval(
      _title: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeManager1Address(
      _newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeManager2Address(
      _newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeManager3Address(
      _newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeManager4Address(
      _newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeManager5Address(
      _newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteTopic(
      _title: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActiveTopics(
      overrides?: CallOverrides
    ): Promise<[Managers.TopicStructOutput[]]>;

    getManagerApprovalsForTitle(
      _title: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [Managers.TopicApprovalStructOutput[]] & {
        _returnData: Managers.TopicApprovalStructOutput[];
      }
    >;

    isApproved(
      _title: PromiseOrValue<string>,
      _value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isApproved: boolean }>;

    isManager(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    manager1(overrides?: CallOverrides): Promise<[string]>;

    manager2(overrides?: CallOverrides): Promise<[string]>;

    manager3(overrides?: CallOverrides): Promise<[string]>;

    manager4(overrides?: CallOverrides): Promise<[string]>;

    manager5(overrides?: CallOverrides): Promise<[string]>;

    managerApprovalsForTopic(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, string] & {
        source: string;
        approved: boolean;
        value: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trustedSources(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { sourceAddress: string; sourceName: string }
    >;
  };

  activeTopics(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      source: string;
      title: string;
      approveCount: BigNumber;
    }
  >;

  addAddressToTrustedSources(
    _address: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveTopic(
    _title: PromiseOrValue<string>,
    _valueInBytes: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelTopicApproval(
    _title: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeManager1Address(
    _newAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeManager2Address(
    _newAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeManager3Address(
    _newAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeManager4Address(
    _newAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeManager5Address(
    _newAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteTopic(
    _title: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActiveTopics(
    overrides?: CallOverrides
  ): Promise<Managers.TopicStructOutput[]>;

  getManagerApprovalsForTitle(
    _title: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Managers.TopicApprovalStructOutput[]>;

  isApproved(
    _title: PromiseOrValue<string>,
    _value: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isManager(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  manager1(overrides?: CallOverrides): Promise<string>;

  manager2(overrides?: CallOverrides): Promise<string>;

  manager3(overrides?: CallOverrides): Promise<string>;

  manager4(overrides?: CallOverrides): Promise<string>;

  manager5(overrides?: CallOverrides): Promise<string>;

  managerApprovalsForTopic(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, string] & {
      source: string;
      approved: boolean;
      value: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  trustedSources(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { sourceAddress: string; sourceName: string }>;

  callStatic: {
    activeTopics(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        source: string;
        title: string;
        approveCount: BigNumber;
      }
    >;

    addAddressToTrustedSources(
      _address: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveTopic(
      _title: PromiseOrValue<string>,
      _valueInBytes: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelTopicApproval(
      _title: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeManager1Address(
      _newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeManager2Address(
      _newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeManager3Address(
      _newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeManager4Address(
      _newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeManager5Address(
      _newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteTopic(
      _title: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getActiveTopics(
      overrides?: CallOverrides
    ): Promise<Managers.TopicStructOutput[]>;

    getManagerApprovalsForTitle(
      _title: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Managers.TopicApprovalStructOutput[]>;

    isApproved(
      _title: PromiseOrValue<string>,
      _value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isManager(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    manager1(overrides?: CallOverrides): Promise<string>;

    manager2(overrides?: CallOverrides): Promise<string>;

    manager3(overrides?: CallOverrides): Promise<string>;

    manager4(overrides?: CallOverrides): Promise<string>;

    manager5(overrides?: CallOverrides): Promise<string>;

    managerApprovalsForTopic(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, string] & {
        source: string;
        approved: boolean;
        value: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedSources(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { sourceAddress: string; sourceName: string }
    >;
  };

  filters: {
    "AddTrustedSource(address,string)"(
      _address?: PromiseOrValue<string> | null,
      _name?: PromiseOrValue<string> | null
    ): AddTrustedSourceEventFilter;
    AddTrustedSource(
      _address?: PromiseOrValue<string> | null,
      _name?: PromiseOrValue<string> | null
    ): AddTrustedSourceEventFilter;

    "ApproveTopic(address,string,bytes)"(
      _by?: PromiseOrValue<string> | null,
      _title?: PromiseOrValue<string> | null,
      _valueInBytes?: PromiseOrValue<BytesLike> | null
    ): ApproveTopicEventFilter;
    ApproveTopic(
      _by?: PromiseOrValue<string> | null,
      _title?: PromiseOrValue<string> | null,
      _valueInBytes?: PromiseOrValue<BytesLike> | null
    ): ApproveTopicEventFilter;

    "CancelTopicApproval(address,string)"(
      _by?: PromiseOrValue<string> | null,
      _title?: PromiseOrValue<string> | null
    ): CancelTopicApprovalEventFilter;
    CancelTopicApproval(
      _by?: PromiseOrValue<string> | null,
      _title?: PromiseOrValue<string> | null
    ): CancelTopicApprovalEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    activeTopics(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAddressToTrustedSources(
      _address: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveTopic(
      _title: PromiseOrValue<string>,
      _valueInBytes: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelTopicApproval(
      _title: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeManager1Address(
      _newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeManager2Address(
      _newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeManager3Address(
      _newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeManager4Address(
      _newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeManager5Address(
      _newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteTopic(
      _title: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActiveTopics(overrides?: CallOverrides): Promise<BigNumber>;

    getManagerApprovalsForTitle(
      _title: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApproved(
      _title: PromiseOrValue<string>,
      _value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isManager(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manager1(overrides?: CallOverrides): Promise<BigNumber>;

    manager2(overrides?: CallOverrides): Promise<BigNumber>;

    manager3(overrides?: CallOverrides): Promise<BigNumber>;

    manager4(overrides?: CallOverrides): Promise<BigNumber>;

    manager5(overrides?: CallOverrides): Promise<BigNumber>;

    managerApprovalsForTopic(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    trustedSources(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeTopics(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAddressToTrustedSources(
      _address: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveTopic(
      _title: PromiseOrValue<string>,
      _valueInBytes: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelTopicApproval(
      _title: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeManager1Address(
      _newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeManager2Address(
      _newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeManager3Address(
      _newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeManager4Address(
      _newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeManager5Address(
      _newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteTopic(
      _title: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActiveTopics(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getManagerApprovalsForTitle(
      _title: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApproved(
      _title: PromiseOrValue<string>,
      _value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isManager(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manager1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager3(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager4(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager5(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managerApprovalsForTopic(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    trustedSources(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
