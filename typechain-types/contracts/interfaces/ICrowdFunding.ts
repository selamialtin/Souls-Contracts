/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type TokenRewardStruct = {
  amount: PromiseOrValue<BigNumberish>;
  releaseDate: PromiseOrValue<BigNumberish>;
  isClaimed: PromiseOrValue<boolean>;
  isActive: PromiseOrValue<boolean>;
};

export type TokenRewardStructOutput = [
  BigNumber,
  BigNumber,
  boolean,
  boolean
] & {
  amount: BigNumber;
  releaseDate: BigNumber;
  isClaimed: boolean;
  isActive: boolean;
};

export interface ICrowdFundingInterface extends utils.Interface {
  functions: {
    "activateInvestorVesting(address,uint8,address)": FunctionFragment;
    "addRewards(address[],uint256[],uint256[],uint8[],uint256,address)": FunctionFragment;
    "addToBlacklist(address,address)": FunctionFragment;
    "claimTokens(uint8)": FunctionFragment;
    "deactivateInvestorVesting(address,uint8,address)": FunctionFragment;
    "fetchRewardsInfo(uint8)": FunctionFragment;
    "fetchRewardsInfoForAccount(address,uint8)": FunctionFragment;
    "getTotalBalance()": FunctionFragment;
    "isInBlacklist(address,uint256)": FunctionFragment;
    "removeFromBlacklist(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateInvestorVesting"
      | "addRewards"
      | "addToBlacklist"
      | "claimTokens"
      | "deactivateInvestorVesting"
      | "fetchRewardsInfo"
      | "fetchRewardsInfoForAccount"
      | "getTotalBalance"
      | "isInBlacklist"
      | "removeFromBlacklist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateInvestorVesting",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addRewards",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addToBlacklist",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateInvestorVesting",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchRewardsInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchRewardsInfoForAccount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInBlacklist",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromBlacklist",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateInvestorVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateInvestorVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchRewardsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchRewardsInfoForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromBlacklist",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ICrowdFunding extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICrowdFundingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateInvestorVesting(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      _tokenSource: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRewards(
      _rewardOwners: PromiseOrValue<string>[],
      _advancePayments: PromiseOrValue<BigNumberish>[],
      _amountsPerVesting: PromiseOrValue<BigNumberish>[],
      _numberOfVestings: PromiseOrValue<BigNumberish>[],
      _releaseDate: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToBlacklist(
      _rewardOwner: PromiseOrValue<string>,
      _tokenReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimTokens(
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deactivateInvestorVesting(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      _tokenReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fetchRewardsInfo(
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[TokenRewardStructOutput]>;

    fetchRewardsInfoForAccount(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[TokenRewardStructOutput]>;

    getTotalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    isInBlacklist(
      _address: PromiseOrValue<string>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeFromBlacklist(
      _rewardOwner: PromiseOrValue<string>,
      _tokenSource: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  activateInvestorVesting(
    _rewardOwner: PromiseOrValue<string>,
    _vestingIndex: PromiseOrValue<BigNumberish>,
    _tokenSource: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRewards(
    _rewardOwners: PromiseOrValue<string>[],
    _advancePayments: PromiseOrValue<BigNumberish>[],
    _amountsPerVesting: PromiseOrValue<BigNumberish>[],
    _numberOfVestings: PromiseOrValue<BigNumberish>[],
    _releaseDate: PromiseOrValue<BigNumberish>,
    _tokenHolder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToBlacklist(
    _rewardOwner: PromiseOrValue<string>,
    _tokenReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimTokens(
    _vestingIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deactivateInvestorVesting(
    _rewardOwner: PromiseOrValue<string>,
    _vestingIndex: PromiseOrValue<BigNumberish>,
    _tokenReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fetchRewardsInfo(
    _vestingIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<TokenRewardStructOutput>;

  fetchRewardsInfoForAccount(
    _rewardOwner: PromiseOrValue<string>,
    _vestingIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<TokenRewardStructOutput>;

  getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  isInBlacklist(
    _address: PromiseOrValue<string>,
    _time: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeFromBlacklist(
    _rewardOwner: PromiseOrValue<string>,
    _tokenSource: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activateInvestorVesting(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      _tokenSource: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addRewards(
      _rewardOwners: PromiseOrValue<string>[],
      _advancePayments: PromiseOrValue<BigNumberish>[],
      _amountsPerVesting: PromiseOrValue<BigNumberish>[],
      _numberOfVestings: PromiseOrValue<BigNumberish>[],
      _releaseDate: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addToBlacklist(
      _rewardOwner: PromiseOrValue<string>,
      _tokenReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTokens(
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivateInvestorVesting(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      _tokenReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchRewardsInfo(
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<TokenRewardStructOutput>;

    fetchRewardsInfoForAccount(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<TokenRewardStructOutput>;

    getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    isInBlacklist(
      _address: PromiseOrValue<string>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeFromBlacklist(
      _rewardOwner: PromiseOrValue<string>,
      _tokenSource: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    activateInvestorVesting(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      _tokenSource: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRewards(
      _rewardOwners: PromiseOrValue<string>[],
      _advancePayments: PromiseOrValue<BigNumberish>[],
      _amountsPerVesting: PromiseOrValue<BigNumberish>[],
      _numberOfVestings: PromiseOrValue<BigNumberish>[],
      _releaseDate: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToBlacklist(
      _rewardOwner: PromiseOrValue<string>,
      _tokenReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimTokens(
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deactivateInvestorVesting(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      _tokenReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fetchRewardsInfo(
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchRewardsInfoForAccount(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    isInBlacklist(
      _address: PromiseOrValue<string>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeFromBlacklist(
      _rewardOwner: PromiseOrValue<string>,
      _tokenSource: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activateInvestorVesting(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      _tokenSource: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRewards(
      _rewardOwners: PromiseOrValue<string>[],
      _advancePayments: PromiseOrValue<BigNumberish>[],
      _amountsPerVesting: PromiseOrValue<BigNumberish>[],
      _numberOfVestings: PromiseOrValue<BigNumberish>[],
      _releaseDate: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToBlacklist(
      _rewardOwner: PromiseOrValue<string>,
      _tokenReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimTokens(
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deactivateInvestorVesting(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      _tokenReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fetchRewardsInfo(
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchRewardsInfoForAccount(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInBlacklist(
      _address: PromiseOrValue<string>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFromBlacklist(
      _rewardOwner: PromiseOrValue<string>,
      _tokenSource: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
