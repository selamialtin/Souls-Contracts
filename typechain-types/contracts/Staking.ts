/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Staking {
  export type StakeDataStruct = {
    amount: PromiseOrValue<BigNumberish>;
    stakeDate: PromiseOrValue<BigNumberish>;
    releaseDate: PromiseOrValue<BigNumberish>;
    percentage: PromiseOrValue<BigNumberish>;
    monthToStake: PromiseOrValue<BigNumberish>;
    withdrawn: PromiseOrValue<boolean>;
    withdrawTime: PromiseOrValue<BigNumberish>;
  };

  export type StakeDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    boolean,
    BigNumber
  ] & {
    amount: BigNumber;
    stakeDate: BigNumber;
    releaseDate: BigNumber;
    percentage: BigNumber;
    monthToStake: number;
    withdrawn: boolean;
    withdrawTime: BigNumber;
  };
}

export interface StakingInterface extends utils.Interface {
  functions: {
    "changeMinimumStakingAmount(uint256)": FunctionFragment;
    "changeStakeAPYrates(uint256,uint256,uint256,uint256)": FunctionFragment;
    "emergencyWithdrawStake(uint256)": FunctionFragment;
    "fetchOwnStakeData()": FunctionFragment;
    "fetchStakeDataForAddress(address)": FunctionFragment;
    "fetchStakeReward(uint256)": FunctionFragment;
    "fetchStakeRewardForAddress(address,uint256)": FunctionFragment;
    "fetchStakers()": FunctionFragment;
    "getTotalBalance()": FunctionFragment;
    "isStaker(address)": FunctionFragment;
    "minimumStakingAmount()": FunctionFragment;
    "monthToSecond()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "stake(uint256,uint8)": FunctionFragment;
    "stakePercentagePer12Month()": FunctionFragment;
    "stakePercentagePer1Month()": FunctionFragment;
    "stakePercentagePer3Month()": FunctionFragment;
    "stakePercentagePer6Month()": FunctionFragment;
    "stakers(uint256)": FunctionFragment;
    "stakes(address,uint256)": FunctionFragment;
    "tokenContract()": FunctionFragment;
    "totalBurnedAmount()": FunctionFragment;
    "totalDistributedReward()": FunctionFragment;
    "totalStakedAmount()": FunctionFragment;
    "totalWithdrawnAmount()": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdrawStake(uint256)": FunctionFragment;
    "yearToSecond()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "changeMinimumStakingAmount"
      | "changeStakeAPYrates"
      | "emergencyWithdrawStake"
      | "fetchOwnStakeData"
      | "fetchStakeDataForAddress"
      | "fetchStakeReward"
      | "fetchStakeRewardForAddress"
      | "fetchStakers"
      | "getTotalBalance"
      | "isStaker"
      | "minimumStakingAmount"
      | "monthToSecond"
      | "pause"
      | "paused"
      | "stake"
      | "stakePercentagePer12Month"
      | "stakePercentagePer1Month"
      | "stakePercentagePer3Month"
      | "stakePercentagePer6Month"
      | "stakers"
      | "stakes"
      | "tokenContract"
      | "totalBurnedAmount"
      | "totalDistributedReward"
      | "totalStakedAmount"
      | "totalWithdrawnAmount"
      | "unpause"
      | "withdrawStake"
      | "yearToSecond"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "changeMinimumStakingAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeStakeAPYrates",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawStake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchOwnStakeData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchStakeDataForAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchStakeReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchStakeRewardForAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchStakers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isStaker",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumStakingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "monthToSecond",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakePercentagePer12Month",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakePercentagePer1Month",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakePercentagePer3Month",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakePercentagePer6Month",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBurnedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDistributedReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWithdrawnAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "yearToSecond",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "changeMinimumStakingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeStakeAPYrates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchOwnStakeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchStakeDataForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchStakeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchStakeRewardForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchStakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isStaker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumStakingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "monthToSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakePercentagePer12Month",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakePercentagePer1Month",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakePercentagePer3Month",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakePercentagePer6Month",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBurnedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDistributedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWithdrawnAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yearToSecond",
    data: BytesLike
  ): Result;

  events: {
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "Stake(address,uint256,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface EmergencyWithdrawEventObject {
  sender: string;
  amount: BigNumber;
  stakeDate: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  EmergencyWithdrawEventObject
>;

export type EmergencyWithdrawEventFilter =
  TypedEventFilter<EmergencyWithdrawEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface StakeEventObject {
  sender: string;
  amount: BigNumber;
  stakeDate: BigNumber;
  releaseDate: BigNumber;
}
export type StakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  StakeEventObject
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawEventObject {
  sender: string;
  amount: BigNumber;
  stakeDate: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeMinimumStakingAmount(
      _newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeStakeAPYrates(
      _newPercentagePer1Month: PromiseOrValue<BigNumberish>,
      _newPercentagePer3Month: PromiseOrValue<BigNumberish>,
      _newPercentagePer6Month: PromiseOrValue<BigNumberish>,
      _newPercentagePer12Month: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawStake(
      _stakeIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fetchOwnStakeData(
      overrides?: CallOverrides
    ): Promise<[Staking.StakeDataStructOutput[]]>;

    fetchStakeDataForAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Staking.StakeDataStructOutput[]]>;

    fetchStakeReward(
      _stakeIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _totalAmount: BigNumber;
        _penaltyAmount: BigNumber;
      }
    >;

    fetchStakeRewardForAddress(
      _address: PromiseOrValue<string>,
      _stakeIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _totalAmount: BigNumber;
        _penaltyAmount: BigNumber;
      }
    >;

    fetchStakers(overrides?: CallOverrides): Promise<[string[]]>;

    getTotalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    isStaker(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minimumStakingAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    monthToSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    stake(
      _amount: PromiseOrValue<BigNumberish>,
      _monthToStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakePercentagePer12Month(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakePercentagePer1Month(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakePercentagePer3Month(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakePercentagePer6Month(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean,
        BigNumber
      ] & {
        amount: BigNumber;
        stakeDate: BigNumber;
        releaseDate: BigNumber;
        percentage: BigNumber;
        monthToStake: number;
        withdrawn: boolean;
        withdrawTime: BigNumber;
      }
    >;

    tokenContract(overrides?: CallOverrides): Promise<[string]>;

    totalBurnedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDistributedReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStakedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalWithdrawnAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawStake(
      _stakeIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    yearToSecond(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  changeMinimumStakingAmount(
    _newAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeStakeAPYrates(
    _newPercentagePer1Month: PromiseOrValue<BigNumberish>,
    _newPercentagePer3Month: PromiseOrValue<BigNumberish>,
    _newPercentagePer6Month: PromiseOrValue<BigNumberish>,
    _newPercentagePer12Month: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawStake(
    _stakeIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fetchOwnStakeData(
    overrides?: CallOverrides
  ): Promise<Staking.StakeDataStructOutput[]>;

  fetchStakeDataForAddress(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Staking.StakeDataStructOutput[]>;

  fetchStakeReward(
    _stakeIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      _totalAmount: BigNumber;
      _penaltyAmount: BigNumber;
    }
  >;

  fetchStakeRewardForAddress(
    _address: PromiseOrValue<string>,
    _stakeIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      _totalAmount: BigNumber;
      _penaltyAmount: BigNumber;
    }
  >;

  fetchStakers(overrides?: CallOverrides): Promise<string[]>;

  getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  isStaker(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minimumStakingAmount(overrides?: CallOverrides): Promise<BigNumber>;

  monthToSecond(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  stake(
    _amount: PromiseOrValue<BigNumberish>,
    _monthToStake: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakePercentagePer12Month(overrides?: CallOverrides): Promise<BigNumber>;

  stakePercentagePer1Month(overrides?: CallOverrides): Promise<BigNumber>;

  stakePercentagePer3Month(overrides?: CallOverrides): Promise<BigNumber>;

  stakePercentagePer6Month(overrides?: CallOverrides): Promise<BigNumber>;

  stakers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  stakes(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, number, boolean, BigNumber] & {
      amount: BigNumber;
      stakeDate: BigNumber;
      releaseDate: BigNumber;
      percentage: BigNumber;
      monthToStake: number;
      withdrawn: boolean;
      withdrawTime: BigNumber;
    }
  >;

  tokenContract(overrides?: CallOverrides): Promise<string>;

  totalBurnedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalDistributedReward(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalWithdrawnAmount(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawStake(
    _stakeIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  yearToSecond(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    changeMinimumStakingAmount(
      _newAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeStakeAPYrates(
      _newPercentagePer1Month: PromiseOrValue<BigNumberish>,
      _newPercentagePer3Month: PromiseOrValue<BigNumberish>,
      _newPercentagePer6Month: PromiseOrValue<BigNumberish>,
      _newPercentagePer12Month: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdrawStake(
      _stakeIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchOwnStakeData(
      overrides?: CallOverrides
    ): Promise<Staking.StakeDataStructOutput[]>;

    fetchStakeDataForAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Staking.StakeDataStructOutput[]>;

    fetchStakeReward(
      _stakeIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _totalAmount: BigNumber;
        _penaltyAmount: BigNumber;
      }
    >;

    fetchStakeRewardForAddress(
      _address: PromiseOrValue<string>,
      _stakeIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _totalAmount: BigNumber;
        _penaltyAmount: BigNumber;
      }
    >;

    fetchStakers(overrides?: CallOverrides): Promise<string[]>;

    getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    isStaker(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minimumStakingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    monthToSecond(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    stake(
      _amount: PromiseOrValue<BigNumberish>,
      _monthToStake: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakePercentagePer12Month(overrides?: CallOverrides): Promise<BigNumber>;

    stakePercentagePer1Month(overrides?: CallOverrides): Promise<BigNumber>;

    stakePercentagePer3Month(overrides?: CallOverrides): Promise<BigNumber>;

    stakePercentagePer6Month(overrides?: CallOverrides): Promise<BigNumber>;

    stakers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    stakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean,
        BigNumber
      ] & {
        amount: BigNumber;
        stakeDate: BigNumber;
        releaseDate: BigNumber;
        percentage: BigNumber;
        monthToStake: number;
        withdrawn: boolean;
        withdrawTime: BigNumber;
      }
    >;

    tokenContract(overrides?: CallOverrides): Promise<string>;

    totalBurnedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalDistributedReward(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalWithdrawnAmount(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdrawStake(
      _stakeIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    yearToSecond(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "EmergencyWithdraw(address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      amount?: null,
      stakeDate?: null
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      sender?: PromiseOrValue<string> | null,
      amount?: null,
      stakeDate?: null
    ): EmergencyWithdrawEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Stake(address,uint256,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      amount?: null,
      stakeDate?: null,
      releaseDate?: null
    ): StakeEventFilter;
    Stake(
      sender?: PromiseOrValue<string> | null,
      amount?: null,
      stakeDate?: null,
      releaseDate?: null
    ): StakeEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdraw(address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      amount?: null,
      stakeDate?: null
    ): WithdrawEventFilter;
    Withdraw(
      sender?: PromiseOrValue<string> | null,
      amount?: null,
      stakeDate?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    changeMinimumStakingAmount(
      _newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeStakeAPYrates(
      _newPercentagePer1Month: PromiseOrValue<BigNumberish>,
      _newPercentagePer3Month: PromiseOrValue<BigNumberish>,
      _newPercentagePer6Month: PromiseOrValue<BigNumberish>,
      _newPercentagePer12Month: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawStake(
      _stakeIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fetchOwnStakeData(overrides?: CallOverrides): Promise<BigNumber>;

    fetchStakeDataForAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchStakeReward(
      _stakeIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchStakeRewardForAddress(
      _address: PromiseOrValue<string>,
      _stakeIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchStakers(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    isStaker(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumStakingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    monthToSecond(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      _amount: PromiseOrValue<BigNumberish>,
      _monthToStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakePercentagePer12Month(overrides?: CallOverrides): Promise<BigNumber>;

    stakePercentagePer1Month(overrides?: CallOverrides): Promise<BigNumber>;

    stakePercentagePer3Month(overrides?: CallOverrides): Promise<BigNumber>;

    stakePercentagePer6Month(overrides?: CallOverrides): Promise<BigNumber>;

    stakers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenContract(overrides?: CallOverrides): Promise<BigNumber>;

    totalBurnedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalDistributedReward(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalWithdrawnAmount(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawStake(
      _stakeIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    yearToSecond(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    changeMinimumStakingAmount(
      _newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeStakeAPYrates(
      _newPercentagePer1Month: PromiseOrValue<BigNumberish>,
      _newPercentagePer3Month: PromiseOrValue<BigNumberish>,
      _newPercentagePer6Month: PromiseOrValue<BigNumberish>,
      _newPercentagePer12Month: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawStake(
      _stakeIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fetchOwnStakeData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchStakeDataForAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchStakeReward(
      _stakeIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchStakeRewardForAddress(
      _address: PromiseOrValue<string>,
      _stakeIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchStakers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isStaker(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumStakingAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    monthToSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      _amount: PromiseOrValue<BigNumberish>,
      _monthToStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakePercentagePer12Month(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakePercentagePer1Month(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakePercentagePer3Month(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakePercentagePer6Month(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBurnedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDistributedReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStakedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWithdrawnAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawStake(
      _stakeIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    yearToSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
