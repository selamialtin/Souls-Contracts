/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Vault {
  export type LockedTokenStruct = {
    amount: PromiseOrValue<BigNumberish>;
    unlockTime: PromiseOrValue<BigNumberish>;
    released: PromiseOrValue<boolean>;
  };

  export type LockedTokenStructOutput = [BigNumber, BigNumber, boolean] & {
    amount: BigNumber;
    unlockTime: BigNumber;
    released: boolean;
  };
}

export interface LiquidityVaultInterface extends utils.Interface {
  functions: {
    "BUSDAmountForInitialLiquidity()": FunctionFragment;
    "CEXShare()": FunctionFragment;
    "DEXPairAddress()": FunctionFragment;
    "addLiquidityOnDEX(uint256)": FunctionFragment;
    "amountUsedForLiquidityOnDEX()": FunctionFragment;
    "balanceAddedLiquidityOnDex()": FunctionFragment;
    "currentVestingIndex()": FunctionFragment;
    "depositTokens(uint256,address)": FunctionFragment;
    "getAvailableAmountForWithdraw()": FunctionFragment;
    "getDEXPairAddress()": FunctionFragment;
    "getRequiredBUSDAmountForLiquidity(uint256)": FunctionFragment;
    "getSoulsBalance()": FunctionFragment;
    "getVestingData()": FunctionFragment;
    "initialPriceForDex()": FunctionFragment;
    "lockTokens(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "lockTokens(uint256)": FunctionFragment;
    "marketMakerShare()": FunctionFragment;
    "marketMakerShareWithdrawDeadline()": FunctionFragment;
    "marketMakerShareWithdrawnAmount()": FunctionFragment;
    "proxyAddress()": FunctionFragment;
    "releasedAmount()": FunctionFragment;
    "remainingTokensUnlockTime()": FunctionFragment;
    "soulsTokenAddress()": FunctionFragment;
    "tokenAmountForInitialLiquidityOnDEX()": FunctionFragment;
    "tokenAmountForLiquidity()": FunctionFragment;
    "tokenVestings(uint256)": FunctionFragment;
    "totalDEXShare()": FunctionFragment;
    "totalWithdrawnAmount()": FunctionFragment;
    "vaultName()": FunctionFragment;
    "withdrawMarketMakerShare(address,uint256)": FunctionFragment;
    "withdrawRemainingTokens(address[],uint256[])": FunctionFragment;
    "withdrawTokens(address[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BUSDAmountForInitialLiquidity"
      | "CEXShare"
      | "DEXPairAddress"
      | "addLiquidityOnDEX"
      | "amountUsedForLiquidityOnDEX"
      | "balanceAddedLiquidityOnDex"
      | "currentVestingIndex"
      | "depositTokens"
      | "getAvailableAmountForWithdraw"
      | "getDEXPairAddress"
      | "getRequiredBUSDAmountForLiquidity"
      | "getSoulsBalance"
      | "getVestingData"
      | "initialPriceForDex"
      | "lockTokens(uint256,uint256,uint256,uint256,uint256)"
      | "lockTokens(uint256)"
      | "marketMakerShare"
      | "marketMakerShareWithdrawDeadline"
      | "marketMakerShareWithdrawnAmount"
      | "proxyAddress"
      | "releasedAmount"
      | "remainingTokensUnlockTime"
      | "soulsTokenAddress"
      | "tokenAmountForInitialLiquidityOnDEX"
      | "tokenAmountForLiquidity"
      | "tokenVestings"
      | "totalDEXShare"
      | "totalWithdrawnAmount"
      | "vaultName"
      | "withdrawMarketMakerShare"
      | "withdrawRemainingTokens"
      | "withdrawTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BUSDAmountForInitialLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CEXShare", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEXPairAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityOnDEX",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "amountUsedForLiquidityOnDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceAddedLiquidityOnDex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentVestingIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositTokens",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableAmountForWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDEXPairAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredBUSDAmountForLiquidity",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSoulsBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialPriceForDex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockTokens(uint256,uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lockTokens(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "marketMakerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketMakerShareWithdrawDeadline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketMakerShareWithdrawnAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releasedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remainingTokensUnlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "soulsTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAmountForInitialLiquidityOnDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAmountForLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenVestings",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDEXShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWithdrawnAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vaultName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawMarketMakerShare",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRemainingTokens",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "BUSDAmountForInitialLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CEXShare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEXPairAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityOnDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountUsedForLiquidityOnDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceAddedLiquidityOnDex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentVestingIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableAmountForWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDEXPairAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredBUSDAmountForLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSoulsBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialPriceForDex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockTokens(uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockTokens(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketMakerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketMakerShareWithdrawDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketMakerShareWithdrawnAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releasedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingTokensUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "soulsTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAmountForInitialLiquidityOnDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAmountForLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenVestings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDEXShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWithdrawnAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMarketMakerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRemainingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "DepositTokens(uint256,uint256)": EventFragment;
    "ReleaseVesting(uint256,uint256)": EventFragment;
    "Withdraw(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleaseVesting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface DepositTokensEventObject {
  date: BigNumber;
  _amount: BigNumber;
}
export type DepositTokensEvent = TypedEvent<
  [BigNumber, BigNumber],
  DepositTokensEventObject
>;

export type DepositTokensEventFilter = TypedEventFilter<DepositTokensEvent>;

export interface ReleaseVestingEventObject {
  date: BigNumber;
  vestingIndex: BigNumber;
}
export type ReleaseVestingEvent = TypedEvent<
  [BigNumber, BigNumber],
  ReleaseVestingEventObject
>;

export type ReleaseVestingEventFilter = TypedEventFilter<ReleaseVestingEvent>;

export interface WithdrawEventObject {
  date: BigNumber;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface LiquidityVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidityVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BUSDAmountForInitialLiquidity(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _busdAmount: BigNumber }>;

    CEXShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEXPairAddress(overrides?: CallOverrides): Promise<[string]>;

    addLiquidityOnDEX(
      _tokenAmountToAdd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    amountUsedForLiquidityOnDEX(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceAddedLiquidityOnDex(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentVestingIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAvailableAmountForWithdraw(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    getDEXPairAddress(overrides?: CallOverrides): Promise<[string]>;

    getRequiredBUSDAmountForLiquidity(
      _tokenAmountToAdd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _BUSDAmountForLiquidty: BigNumber }>;

    getSoulsBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _soulsBalance: BigNumber }>;

    getVestingData(
      overrides?: CallOverrides
    ): Promise<[Vault.LockedTokenStructOutput[]]>;

    initialPriceForDex(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lockTokens(uint256,uint256,uint256,uint256,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "lockTokens(uint256)"(
      _totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    marketMakerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    marketMakerShareWithdrawDeadline(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    marketMakerShareWithdrawnAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proxyAddress(overrides?: CallOverrides): Promise<[string]>;

    releasedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    remainingTokensUnlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    soulsTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    tokenAmountForInitialLiquidityOnDEX(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenAmountForLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenVestings(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        unlockTime: BigNumber;
        released: boolean;
      }
    >;

    totalDEXShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalWithdrawnAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultName(overrides?: CallOverrides): Promise<[string]>;

    withdrawMarketMakerShare(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawRemainingTokens(
      _receivers: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawTokens(
      arg0: PromiseOrValue<string>[],
      arg1: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  BUSDAmountForInitialLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  CEXShare(overrides?: CallOverrides): Promise<BigNumber>;

  DEXPairAddress(overrides?: CallOverrides): Promise<string>;

  addLiquidityOnDEX(
    _tokenAmountToAdd: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  amountUsedForLiquidityOnDEX(overrides?: CallOverrides): Promise<BigNumber>;

  balanceAddedLiquidityOnDex(overrides?: CallOverrides): Promise<BigNumber>;

  currentVestingIndex(overrides?: CallOverrides): Promise<BigNumber>;

  depositTokens(
    _amount: PromiseOrValue<BigNumberish>,
    _tokenHolder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAvailableAmountForWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

  getDEXPairAddress(overrides?: CallOverrides): Promise<string>;

  getRequiredBUSDAmountForLiquidity(
    _tokenAmountToAdd: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSoulsBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getVestingData(
    overrides?: CallOverrides
  ): Promise<Vault.LockedTokenStructOutput[]>;

  initialPriceForDex(overrides?: CallOverrides): Promise<BigNumber>;

  "lockTokens(uint256,uint256,uint256,uint256,uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  "lockTokens(uint256)"(
    _totalAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  marketMakerShare(overrides?: CallOverrides): Promise<BigNumber>;

  marketMakerShareWithdrawDeadline(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  marketMakerShareWithdrawnAmount(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proxyAddress(overrides?: CallOverrides): Promise<string>;

  releasedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  remainingTokensUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  soulsTokenAddress(overrides?: CallOverrides): Promise<string>;

  tokenAmountForInitialLiquidityOnDEX(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenAmountForLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  tokenVestings(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      amount: BigNumber;
      unlockTime: BigNumber;
      released: boolean;
    }
  >;

  totalDEXShare(overrides?: CallOverrides): Promise<BigNumber>;

  totalWithdrawnAmount(overrides?: CallOverrides): Promise<BigNumber>;

  vaultName(overrides?: CallOverrides): Promise<string>;

  withdrawMarketMakerShare(
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawRemainingTokens(
    _receivers: PromiseOrValue<string>[],
    _amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawTokens(
    arg0: PromiseOrValue<string>[],
    arg1: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    BUSDAmountForInitialLiquidity(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CEXShare(overrides?: CallOverrides): Promise<BigNumber>;

    DEXPairAddress(overrides?: CallOverrides): Promise<string>;

    addLiquidityOnDEX(
      _tokenAmountToAdd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    amountUsedForLiquidityOnDEX(overrides?: CallOverrides): Promise<BigNumber>;

    balanceAddedLiquidityOnDex(overrides?: CallOverrides): Promise<BigNumber>;

    currentVestingIndex(overrides?: CallOverrides): Promise<BigNumber>;

    depositTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAvailableAmountForWithdraw(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDEXPairAddress(overrides?: CallOverrides): Promise<string>;

    getRequiredBUSDAmountForLiquidity(
      _tokenAmountToAdd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSoulsBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getVestingData(
      overrides?: CallOverrides
    ): Promise<Vault.LockedTokenStructOutput[]>;

    initialPriceForDex(overrides?: CallOverrides): Promise<BigNumber>;

    "lockTokens(uint256,uint256,uint256,uint256,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockTokens(uint256)"(
      _totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    marketMakerShare(overrides?: CallOverrides): Promise<BigNumber>;

    marketMakerShareWithdrawDeadline(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketMakerShareWithdrawnAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxyAddress(overrides?: CallOverrides): Promise<string>;

    releasedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    remainingTokensUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    soulsTokenAddress(overrides?: CallOverrides): Promise<string>;

    tokenAmountForInitialLiquidityOnDEX(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenAmountForLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    tokenVestings(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        unlockTime: BigNumber;
        released: boolean;
      }
    >;

    totalDEXShare(overrides?: CallOverrides): Promise<BigNumber>;

    totalWithdrawnAmount(overrides?: CallOverrides): Promise<BigNumber>;

    vaultName(overrides?: CallOverrides): Promise<string>;

    withdrawMarketMakerShare(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawRemainingTokens(
      _receivers: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokens(
      arg0: PromiseOrValue<string>[],
      arg1: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DepositTokens(uint256,uint256)"(
      date?: PromiseOrValue<BigNumberish> | null,
      _amount?: null
    ): DepositTokensEventFilter;
    DepositTokens(
      date?: PromiseOrValue<BigNumberish> | null,
      _amount?: null
    ): DepositTokensEventFilter;

    "ReleaseVesting(uint256,uint256)"(
      date?: PromiseOrValue<BigNumberish> | null,
      vestingIndex?: PromiseOrValue<BigNumberish> | null
    ): ReleaseVestingEventFilter;
    ReleaseVesting(
      date?: PromiseOrValue<BigNumberish> | null,
      vestingIndex?: PromiseOrValue<BigNumberish> | null
    ): ReleaseVestingEventFilter;

    "Withdraw(uint256,uint256)"(
      date?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): WithdrawEventFilter;
    Withdraw(
      date?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    BUSDAmountForInitialLiquidity(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CEXShare(overrides?: CallOverrides): Promise<BigNumber>;

    DEXPairAddress(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidityOnDEX(
      _tokenAmountToAdd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    amountUsedForLiquidityOnDEX(overrides?: CallOverrides): Promise<BigNumber>;

    balanceAddedLiquidityOnDex(overrides?: CallOverrides): Promise<BigNumber>;

    currentVestingIndex(overrides?: CallOverrides): Promise<BigNumber>;

    depositTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAvailableAmountForWithdraw(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDEXPairAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getRequiredBUSDAmountForLiquidity(
      _tokenAmountToAdd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSoulsBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getVestingData(overrides?: CallOverrides): Promise<BigNumber>;

    initialPriceForDex(overrides?: CallOverrides): Promise<BigNumber>;

    "lockTokens(uint256,uint256,uint256,uint256,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockTokens(uint256)"(
      _totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    marketMakerShare(overrides?: CallOverrides): Promise<BigNumber>;

    marketMakerShareWithdrawDeadline(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketMakerShareWithdrawnAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    releasedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    remainingTokensUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    soulsTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAmountForInitialLiquidityOnDEX(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenAmountForLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    tokenVestings(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDEXShare(overrides?: CallOverrides): Promise<BigNumber>;

    totalWithdrawnAmount(overrides?: CallOverrides): Promise<BigNumber>;

    vaultName(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawMarketMakerShare(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawRemainingTokens(
      _receivers: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawTokens(
      arg0: PromiseOrValue<string>[],
      arg1: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BUSDAmountForInitialLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CEXShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEXPairAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidityOnDEX(
      _tokenAmountToAdd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    amountUsedForLiquidityOnDEX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceAddedLiquidityOnDex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentVestingIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAvailableAmountForWithdraw(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDEXPairAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRequiredBUSDAmountForLiquidity(
      _tokenAmountToAdd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSoulsBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVestingData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialPriceForDex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockTokens(uint256,uint256,uint256,uint256,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockTokens(uint256)"(
      _totalAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    marketMakerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketMakerShareWithdrawDeadline(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketMakerShareWithdrawnAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxyAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releasedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remainingTokensUnlockTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    soulsTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenAmountForInitialLiquidityOnDEX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenAmountForLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenVestings(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDEXShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWithdrawnAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawMarketMakerShare(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRemainingTokens(
      _receivers: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      arg0: PromiseOrValue<string>[],
      arg1: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
