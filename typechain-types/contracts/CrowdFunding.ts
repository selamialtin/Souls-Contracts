/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type TokenRewardStruct = {
  amount: PromiseOrValue<BigNumberish>;
  releaseDate: PromiseOrValue<BigNumberish>;
  isClaimed: PromiseOrValue<boolean>;
  isActive: PromiseOrValue<boolean>;
};

export type TokenRewardStructOutput = [
  BigNumber,
  BigNumber,
  boolean,
  boolean
] & {
  amount: BigNumber;
  releaseDate: BigNumber;
  isClaimed: boolean;
  isActive: boolean;
};

export interface CrowdFundingInterface extends utils.Interface {
  functions: {
    "activateInvestorVesting(address,uint8,address)": FunctionFragment;
    "addRewards(address[],uint256[],uint256[],uint8,uint256,uint256,address)": FunctionFragment;
    "addToBlacklist(address,address)": FunctionFragment;
    "claimTokens(uint8)": FunctionFragment;
    "crowdFundingType()": FunctionFragment;
    "deactivateInvestorVesting(address,uint8,address)": FunctionFragment;
    "getAllVestingInfoForAccount(address)": FunctionFragment;
    "getTotalBalance()": FunctionFragment;
    "getVestingInfo(uint8)": FunctionFragment;
    "getVestingInfoForAccount(address,uint8)": FunctionFragment;
    "investorList(uint256)": FunctionFragment;
    "investors(address)": FunctionFragment;
    "isInBlacklist(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeFromBlacklist(address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "soulsToken()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenRewards(address,uint256)": FunctionFragment;
    "totalCap()": FunctionFragment;
    "totalClaimedAmount()": FunctionFragment;
    "totalRewardAmount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateInvestorVesting"
      | "addRewards"
      | "addToBlacklist"
      | "claimTokens"
      | "crowdFundingType"
      | "deactivateInvestorVesting"
      | "getAllVestingInfoForAccount"
      | "getTotalBalance"
      | "getVestingInfo"
      | "getVestingInfoForAccount"
      | "investorList"
      | "investors"
      | "isInBlacklist"
      | "owner"
      | "paused"
      | "removeFromBlacklist"
      | "renounceOwnership"
      | "soulsToken"
      | "supportsInterface"
      | "tokenRewards"
      | "totalCap"
      | "totalClaimedAmount"
      | "totalRewardAmount"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateInvestorVesting",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addRewards",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addToBlacklist",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "crowdFundingType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateInvestorVesting",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllVestingInfoForAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingInfoForAccount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "investorList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "investors",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isInBlacklist",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFromBlacklist",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "soulsToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "totalCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalClaimedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateInvestorVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crowdFundingType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateInvestorVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllVestingInfoForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingInfoForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "investors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "soulsToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "BalanceWithdraw(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BalanceWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface BalanceWithdrawEventObject {
  sender: string;
  amount: BigNumber;
}
export type BalanceWithdrawEvent = TypedEvent<
  [string, BigNumber],
  BalanceWithdrawEventObject
>;

export type BalanceWithdrawEventFilter = TypedEventFilter<BalanceWithdrawEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface CrowdFunding extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrowdFundingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateInvestorVesting(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      _tokenSource: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRewards(
      _rewardOwners: PromiseOrValue<string>[],
      _advanceAmountPerAddress: PromiseOrValue<BigNumberish>[],
      _totalOfVestings: PromiseOrValue<BigNumberish>[],
      _vestingCount: PromiseOrValue<BigNumberish>,
      _advanceReleaseDate: PromiseOrValue<BigNumberish>,
      _vestingStartDate: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToBlacklist(
      _rewardOwner: PromiseOrValue<string>,
      _tokenReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimTokens(
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    crowdFundingType(overrides?: CallOverrides): Promise<[string]>;

    deactivateInvestorVesting(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      _tokenReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllVestingInfoForAccount(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [TokenRewardStructOutput[]] & { _returnData: TokenRewardStructOutput[] }
    >;

    getTotalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVestingInfo(
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[TokenRewardStructOutput]>;

    getVestingInfoForAccount(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[TokenRewardStructOutput]>;

    investorList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    investors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        vestingCount: BigNumber;
        currentVestingIndex: BigNumber;
        blacklistDate: BigNumber;
      }
    >;

    isInBlacklist(
      _address: PromiseOrValue<string>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeFromBlacklist(
      _rewardOwner: PromiseOrValue<string>,
      _tokenSource: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    soulsToken(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, boolean] & {
        amount: BigNumber;
        releaseDate: BigNumber;
        isClaimed: boolean;
        isActive: boolean;
      }
    >;

    totalCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalClaimedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRewardAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  activateInvestorVesting(
    _rewardOwner: PromiseOrValue<string>,
    _vestingIndex: PromiseOrValue<BigNumberish>,
    _tokenSource: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRewards(
    _rewardOwners: PromiseOrValue<string>[],
    _advanceAmountPerAddress: PromiseOrValue<BigNumberish>[],
    _totalOfVestings: PromiseOrValue<BigNumberish>[],
    _vestingCount: PromiseOrValue<BigNumberish>,
    _advanceReleaseDate: PromiseOrValue<BigNumberish>,
    _vestingStartDate: PromiseOrValue<BigNumberish>,
    _tokenHolder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToBlacklist(
    _rewardOwner: PromiseOrValue<string>,
    _tokenReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimTokens(
    _vestingIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  crowdFundingType(overrides?: CallOverrides): Promise<string>;

  deactivateInvestorVesting(
    _rewardOwner: PromiseOrValue<string>,
    _vestingIndex: PromiseOrValue<BigNumberish>,
    _tokenReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllVestingInfoForAccount(
    _rewardOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<TokenRewardStructOutput[]>;

  getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getVestingInfo(
    _vestingIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<TokenRewardStructOutput>;

  getVestingInfoForAccount(
    _rewardOwner: PromiseOrValue<string>,
    _vestingIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<TokenRewardStructOutput>;

  investorList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  investors(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalAmount: BigNumber;
      vestingCount: BigNumber;
      currentVestingIndex: BigNumber;
      blacklistDate: BigNumber;
    }
  >;

  isInBlacklist(
    _address: PromiseOrValue<string>,
    _time: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeFromBlacklist(
    _rewardOwner: PromiseOrValue<string>,
    _tokenSource: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  soulsToken(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenRewards(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean, boolean] & {
      amount: BigNumber;
      releaseDate: BigNumber;
      isClaimed: boolean;
      isActive: boolean;
    }
  >;

  totalCap(overrides?: CallOverrides): Promise<BigNumber>;

  totalClaimedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalRewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activateInvestorVesting(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      _tokenSource: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addRewards(
      _rewardOwners: PromiseOrValue<string>[],
      _advanceAmountPerAddress: PromiseOrValue<BigNumberish>[],
      _totalOfVestings: PromiseOrValue<BigNumberish>[],
      _vestingCount: PromiseOrValue<BigNumberish>,
      _advanceReleaseDate: PromiseOrValue<BigNumberish>,
      _vestingStartDate: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addToBlacklist(
      _rewardOwner: PromiseOrValue<string>,
      _tokenReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTokens(
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    crowdFundingType(overrides?: CallOverrides): Promise<string>;

    deactivateInvestorVesting(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      _tokenReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllVestingInfoForAccount(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<TokenRewardStructOutput[]>;

    getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getVestingInfo(
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<TokenRewardStructOutput>;

    getVestingInfoForAccount(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<TokenRewardStructOutput>;

    investorList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    investors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        vestingCount: BigNumber;
        currentVestingIndex: BigNumber;
        blacklistDate: BigNumber;
      }
    >;

    isInBlacklist(
      _address: PromiseOrValue<string>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeFromBlacklist(
      _rewardOwner: PromiseOrValue<string>,
      _tokenSource: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    soulsToken(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, boolean] & {
        amount: BigNumber;
        releaseDate: BigNumber;
        isClaimed: boolean;
        isActive: boolean;
      }
    >;

    totalCap(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BalanceWithdraw(address,uint256)"(
      sender?: null,
      amount?: null
    ): BalanceWithdrawEventFilter;
    BalanceWithdraw(sender?: null, amount?: null): BalanceWithdrawEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    activateInvestorVesting(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      _tokenSource: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRewards(
      _rewardOwners: PromiseOrValue<string>[],
      _advanceAmountPerAddress: PromiseOrValue<BigNumberish>[],
      _totalOfVestings: PromiseOrValue<BigNumberish>[],
      _vestingCount: PromiseOrValue<BigNumberish>,
      _advanceReleaseDate: PromiseOrValue<BigNumberish>,
      _vestingStartDate: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToBlacklist(
      _rewardOwner: PromiseOrValue<string>,
      _tokenReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimTokens(
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    crowdFundingType(overrides?: CallOverrides): Promise<BigNumber>;

    deactivateInvestorVesting(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      _tokenReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllVestingInfoForAccount(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getVestingInfo(
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingInfoForAccount(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    investorList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    investors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInBlacklist(
      _address: PromiseOrValue<string>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromBlacklist(
      _rewardOwner: PromiseOrValue<string>,
      _tokenSource: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    soulsToken(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalCap(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activateInvestorVesting(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      _tokenSource: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRewards(
      _rewardOwners: PromiseOrValue<string>[],
      _advanceAmountPerAddress: PromiseOrValue<BigNumberish>[],
      _totalOfVestings: PromiseOrValue<BigNumberish>[],
      _vestingCount: PromiseOrValue<BigNumberish>,
      _advanceReleaseDate: PromiseOrValue<BigNumberish>,
      _vestingStartDate: PromiseOrValue<BigNumberish>,
      _tokenHolder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToBlacklist(
      _rewardOwner: PromiseOrValue<string>,
      _tokenReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimTokens(
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    crowdFundingType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deactivateInvestorVesting(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      _tokenReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllVestingInfoForAccount(
      _rewardOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVestingInfo(
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingInfoForAccount(
      _rewardOwner: PromiseOrValue<string>,
      _vestingIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    investorList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    investors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInBlacklist(
      _address: PromiseOrValue<string>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromBlacklist(
      _rewardOwner: PromiseOrValue<string>,
      _tokenSource: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    soulsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenRewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaimedAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRewardAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
